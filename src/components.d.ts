/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';


export namespace Components {
  interface DemoView {}
  interface MdcButton {
    /**
    * Makes the button text and container slightly smaller.
    */
    'dense': boolean;
    /**
    * Disabled buttons cannot be interacted with and have no visual interaction effect.
    */
    'disabled': boolean;
    /**
    * Indicates the element containing the button's icon.
    */
    'icon': string;
    /**
    * Indicates the element containing the button's text label.
    */
    'label': string;
    /**
    * Styles an outlined button that is flush with the surface.
    */
    'outlined': boolean;
    /**
    * Styles a contained button that is elevated above the surface.
    */
    'raised': boolean;
    /**
    * Indicates if the icon is a trailingIcon.
    */
    'trailingIcon': boolean;
    /**
    * Styles a contained button that is flush with the surface.
    */
    'unelevated': boolean;
  }
  interface MdcIcon {}
  interface MdcTab {
    /**
    * Set a href, this will convert the tab to use an anchor tag
    */
    'href': string;
    /**
    * The icon
    */
    'icon': string;
    /**
    * The tab id
    */
    'id': string;
    /**
    * The label
    */
    'label': string;
    /**
    * Visually activates the indicator
    */
    'selected': boolean;
  }
  interface MdcTabBar {
    /**
    * Should a bottom border be displayed
    */
    'bottomBorder': boolean;
  }
  interface MdcTabIndicator {
    /**
    * Visually activates the indicator
    */
    'isActive': boolean;
  }
  interface MdcTabScroller {}
  interface MyComponent {
    /**
    * The first name
    */
    'first': string;
    /**
    * The last name
    */
    'last': string;
    /**
    * The middle name
    */
    'middle': string;
  }
}

declare global {


  interface HTMLDemoViewElement extends Components.DemoView, HTMLStencilElement {}
  var HTMLDemoViewElement: {
    prototype: HTMLDemoViewElement;
    new (): HTMLDemoViewElement;
  };

  interface HTMLMdcButtonElement extends Components.MdcButton, HTMLStencilElement {}
  var HTMLMdcButtonElement: {
    prototype: HTMLMdcButtonElement;
    new (): HTMLMdcButtonElement;
  };

  interface HTMLMdcIconElement extends Components.MdcIcon, HTMLStencilElement {}
  var HTMLMdcIconElement: {
    prototype: HTMLMdcIconElement;
    new (): HTMLMdcIconElement;
  };

  interface HTMLMdcTabElement extends Components.MdcTab, HTMLStencilElement {}
  var HTMLMdcTabElement: {
    prototype: HTMLMdcTabElement;
    new (): HTMLMdcTabElement;
  };

  interface HTMLMdcTabBarElement extends Components.MdcTabBar, HTMLStencilElement {}
  var HTMLMdcTabBarElement: {
    prototype: HTMLMdcTabBarElement;
    new (): HTMLMdcTabBarElement;
  };

  interface HTMLMdcTabIndicatorElement extends Components.MdcTabIndicator, HTMLStencilElement {}
  var HTMLMdcTabIndicatorElement: {
    prototype: HTMLMdcTabIndicatorElement;
    new (): HTMLMdcTabIndicatorElement;
  };

  interface HTMLMdcTabScrollerElement extends Components.MdcTabScroller, HTMLStencilElement {}
  var HTMLMdcTabScrollerElement: {
    prototype: HTMLMdcTabScrollerElement;
    new (): HTMLMdcTabScrollerElement;
  };

  interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {}
  var HTMLMyComponentElement: {
    prototype: HTMLMyComponentElement;
    new (): HTMLMyComponentElement;
  };
  interface HTMLElementTagNameMap {
    'demo-view': HTMLDemoViewElement;
    'mdc-button': HTMLMdcButtonElement;
    'mdc-icon': HTMLMdcIconElement;
    'mdc-tab': HTMLMdcTabElement;
    'mdc-tab-bar': HTMLMdcTabBarElement;
    'mdc-tab-indicator': HTMLMdcTabIndicatorElement;
    'mdc-tab-scroller': HTMLMdcTabScrollerElement;
    'my-component': HTMLMyComponentElement;
  }
}

declare namespace LocalJSX {
  interface DemoView extends JSXBase.HTMLAttributes<HTMLDemoViewElement> {}
  interface MdcButton extends JSXBase.HTMLAttributes<HTMLMdcButtonElement> {
    /**
    * Makes the button text and container slightly smaller.
    */
    'dense'?: boolean;
    /**
    * Disabled buttons cannot be interacted with and have no visual interaction effect.
    */
    'disabled'?: boolean;
    /**
    * Indicates the element containing the button's icon.
    */
    'icon'?: string;
    /**
    * Indicates the element containing the button's text label.
    */
    'label'?: string;
    /**
    * Styles an outlined button that is flush with the surface.
    */
    'outlined'?: boolean;
    /**
    * Styles a contained button that is elevated above the surface.
    */
    'raised'?: boolean;
    /**
    * Indicates if the icon is a trailingIcon.
    */
    'trailingIcon'?: boolean;
    /**
    * Styles a contained button that is flush with the surface.
    */
    'unelevated'?: boolean;
  }
  interface MdcIcon extends JSXBase.HTMLAttributes<HTMLMdcIconElement> {}
  interface MdcTab extends JSXBase.HTMLAttributes<HTMLMdcTabElement> {
    /**
    * Set a href, this will convert the tab to use an anchor tag
    */
    'href'?: string;
    /**
    * The icon
    */
    'icon'?: string;
    /**
    * The tab id
    */
    'id'?: string;
    /**
    * The label
    */
    'label'?: string;
    /**
    * Visually activates the indicator
    */
    'selected'?: boolean;
  }
  interface MdcTabBar extends JSXBase.HTMLAttributes<HTMLMdcTabBarElement> {
    /**
    * Should a bottom border be displayed
    */
    'bottomBorder'?: boolean;
  }
  interface MdcTabIndicator extends JSXBase.HTMLAttributes<HTMLMdcTabIndicatorElement> {
    /**
    * Visually activates the indicator
    */
    'isActive'?: boolean;
  }
  interface MdcTabScroller extends JSXBase.HTMLAttributes<HTMLMdcTabScrollerElement> {}
  interface MyComponent extends JSXBase.HTMLAttributes<HTMLMyComponentElement> {
    /**
    * The first name
    */
    'first'?: string;
    /**
    * The last name
    */
    'last'?: string;
    /**
    * The middle name
    */
    'middle'?: string;
  }

  interface IntrinsicElements {
    'demo-view': DemoView;
    'mdc-button': MdcButton;
    'mdc-icon': MdcIcon;
    'mdc-tab': MdcTab;
    'mdc-tab-bar': MdcTabBar;
    'mdc-tab-indicator': MdcTabIndicator;
    'mdc-tab-scroller': MdcTabScroller;
    'my-component': MyComponent;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


